#!/usr/bin/env python
"""Calibrate and manage incoming FITS images

This is the contents of the systemd service file used to run this on chronos:

[Unit]
Description=PyScope Incoming Image Processing
After=local-fs.target

[Service]
Type=simple
ExecStart=/usr/local/telescope/bin/process-images
User=talon
Group=talon
Restart=on-failure
Environment="PATH=/opt/miniforge3/bin:/usr/local/telescope/bin:/usr/local/bin:/usr/bin"

[Install]
WantedBy=multi-user.target


"""

import logging
import os
import shutil
import subprocess
import sys
import time
from datetime import datetime as dt
from pathlib import Path

from astropy.io import fits

# RA's in Sloan catalog at 30 deg Dec
sloan_ra = [22,23,0,1,2,8,9,10,11,12,13,14,15,16,17]

# Directory where raw images arrive
landing_dir = Path('/usr/local/telescope/user/images')

# long term storage
storage_root = Path('/mnt/imagesbucket')

# maximum age in seconds
maxage = 7 * 3600 * 24

# image prefixes and group names
groups = dict(m='macalester',
              a='augustana',
              c='coe',
              k='knox',
              i='iowa',
              x='external')

# configure the logger - >INFO to log, >DEBUG to console
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
fh = logging.FileHandler("/usr/local/telescope/archive/logs/process-images.log")
fh.setLevel(logging.INFO)
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
fmt = logging.Formatter("%(asctime)s:%(levelname)s:%(message)s")
fh.setFormatter(fmt)
ch.setFormatter(fmt)
logger.addHandler(fh)
logger.addHandler(ch)

def runcmd(cmd, **kwargs):
    """run a subprocess
    """
    return subprocess.run(cmd, shell=True, capture_output=True,
        encoding='ascii', **kwargs)

def process_image(img):
    """process a single image
    """

    try:
        header = fits.getheader(img, 0)
    except OSError as e:
        logger.warning(f"Corrupt FITS file {str(img)}: {str(e)}")
        return

    if 'CALSTART' not in header and 'CALSTAT' not in header:
        distribute_image(img) # store a copy of the raw image

        logger.info(f'Started processing {img.name}')
        fits.setval(img, 'CALSTART', value=str(dt.now())[:19],
            comment='Calibration start time [MST]', before='LST')
        fil = fits.getval(img, 'FILTER')
        isodate = fits.getval(img, 'DATE-OBS')[:10]

        # calibrate
        cal = runcmd(f'cmos-calib -H 1 {img}')
        for x in cal.stdout.strip().split('\n'):
            header.add_history(x)
            logger.info(x)
        if cal.returncode:
            logger.warning(cal.stderr.strip())

        # wcs and fwhm
        if fil not in ('8', '9', 'S'): # don't do wcs, fwhm on grism or spectroscopy images
            # WCS solutions are obtained by running Pinpoint on TCC, otherwise use local wcs
            #runcmd(f'wcs -u 0.1 -o2w {str(img)} > /dev/null 2>&1')
            runcmd(f'fwhm -ow {str(img)}')

        # Calculate zero-point magnitudes for foc images that are have Sloan filters and are in Sloan catalog
        # NB overwrite switch on to override ZAG solution from Pinpoint
        if img.name[:3] == 'foc':
            ra = int(round(float(header['RA'][0:2])))
            if fil == 'G' and ra in sloan_ra:
                runcmd(f'calc-zmag -f g -ow {img}')
            if fil == 'R' and ra in sloan_ra:
                runcmd(f'calc-zmag -f r -ow {img}')
            if fil == 'I' and ra in sloan_ra:
                runcmd(f'calc-zmag -f i -ow {img}')
            runcmd(f"mv {str(landing_dir)}/*.sexout {str(landing_dir / 'sexout/')}")

        logger.info(f'...finished processing of {img.name}')

    distribute_image(img) # store copy of calibrated image
    
    if img.exists() and time.time() - img.stat().st_mtime > maxage:
        img.unlink()
        logger.info(f"Deleted {img}")

def distribute_image(img):
    """Copy raw or calibrated image to long-term storage
    """
    header = fits.getheader(img, 0)
    if 'CALSTAT' in header:
        yr_obs = header.get('DATE-OBS')[:4]
        obs_code = img.name[0:3]
        day_code = img.name[3:6]
        groupdir = groups.get(obs_code[0], 'other')
        target = storage_root / groupdir / obs_code / yr_obs / day_code / img.name
    elif 'CALSTART' in header:
        target = landing_dir / 'failed' / img.name
    else:
        isodate = header.get('DATE-OBS')[:10]
        target = storage_root / 'rawimage' / isodate / img.name

    # create the image directory and its parents if needed
    if not target.parent.exists():
        target.parent.mkdir(mode=0o775, parents=True)
        logger.info(f'Created directory {str(target.parent)}')

    # copy the image if target doesn't exist or is older
    if not target.exists() or target.stat().st_mtime < img.stat().st_mtime:
        try:
            shutil.copy(img, target)
            if target.parent.name == 'failed':
                img.unlink()
        except:
            logger.exception(f'Unable to copy {img.name}')
        else:
            logger.info(f"Copied {img.name} -> {target}")


os.umask(0o002)

# Can specify day number or file(s) on command line
# in which case script exits when specified files are done
if len(sys.argv) > 1:
    if (runcmd('id -gn').stdout.strip() != 'talon'):
        sys.exit("Must be run as 'talon' user or group")
    if sys.argv[1].isdigit():
        day_nr = format(int(sys.argv[1]), '03d')
        file_list = landing_dir.glob(f"???{day_nr}*.fts")
    else:
        file_list = [Path(x) for x in sys.argv[1:]]
    for img in file_list:
        process_image(img)

# with no arguments, run continuously
else:
    while True:
        file_list = landing_dir.glob("*.fts")
        time.sleep(5)
        for img in file_list:
            process_image(img)
